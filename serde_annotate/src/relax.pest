// see https://spec.json5.org/#syntactic-grammar and
// https://spec.json5.org/#lexical-grammar

COMMENT = { block_comment | slash_comments | hash_comments }

block_comment = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
slash_comment = { "//" ~ (!line_terminator ~ ANY)* }
slash_eol = @{ slash_comment ~ line_terminator_sequence ~ WHITESPACE*}
slash_comments = { 
    slash_eol ~ (slash_eol | slash_comment)+ |
    slash_comment
}
hash_comment = { "#" ~ (!line_terminator ~ ANY)* }
hash_eol = @{ hash_comment ~ line_terminator_sequence ~ WHITESPACE*}
hash_comments = { 
    hash_eol ~ (hash_eol | hash_comment)+ |
    hash_comment
}

WHITESPACE = _{
  "\u{0009}" |
  "\u{000B}" |
  "\u{000C}" |
  "\u{0020}" |
  "\u{00A0}" |
  "\u{FEFF}" |
  SPACE_SEPARATOR |
  line_terminator
}

comma = {","}

array = { "[" ~ (value ~ comma?)* ~ "]" }

boolean = @{ "true" | "false" }

char_escape_sequence = @{ single_escape_char | non_escape_char }

char_literal = @{ !("\\" | line_terminator) ~ ANY }

decimal_integer_literal = _{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

decimal_literal = _{
  decimal_integer_literal ~ "." ~ ASCII_DIGIT* ~ exponent_part? |
  "." ~ ASCII_DIGIT+~ exponent_part? |
  decimal_integer_literal ~ exponent_part?
}

double_quote_char = _{
  "\\" ~ escape_sequence |
  line_continuation |
  !"\"" ~ char_literal
}

escape_char = _{ single_escape_char | ASCII_DIGIT | "x" | "u" }

escape_sequence = _{
  char_escape_sequence |
  nul_escape_sequence |
  "x" ~ hex_escape_sequence |
  "u" ~ unicode_escape_sequence
}

exponent_part = _{ ^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+ }

hex_escape_sequence = @{ ASCII_HEX_DIGIT{2} }

hex_integer_literal = _{ ^"0x" ~ ASCII_HEX_DIGIT+ }
bin_integer_literal = _{ ^"0b" ~ ('0'..'1')+ }
oct_integer_literal = _{ ^"0o" ~ ('0'..'7')+ }

identifier = ${ identifier_start ~ identifier_part* }

identifier_part = _{
  identifier_start |
  &(
    !hjson_punctuator |
    NONSPACING_MARK |
    DIACRITIC | // not sure about this, spec says "Combining spacing mark (Mc)"
    DECIMAL_NUMBER |
    CONNECTOR_PUNCTUATION |
    "\u{200C}" |
    "\u{200D}"
  ) ~ char_literal
}

identifier_start = _{
  &(unicode_letter | "$" | "_") ~ char_literal |
  "\\u" ~ unicode_escape_sequence
}


key = _{ identifier | number | string }

line_continuation = _{ "\\" ~ line_terminator_sequence }

line_terminator = _{ "\u{000A}" | "\u{000D}" | "\u{2028}" | "\u{2029}" }

line_terminator_sequence = _{ "\u{000D}" ~ "\u{000A}" | line_terminator }

non_escape_char = _{ !(escape_char | line_terminator) ~ ANY }

nul_escape_sequence = @{ "0" }

null = @{ "null" }

number = @{ ("+" | "-")? ~ numeric_literal }

numeric_literal = _{
  bin_integer_literal |
  hex_integer_literal |
  oct_integer_literal |
  decimal_literal |
  "Infinity" |
  "NaN"
}

object = { "{" ~ (kvpair ~ comma?)* ~ "}" }

kvpair = _{ key ~ ":" ~ value }

single_escape_char = _{ "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v" }

single_quote_char = _{
  "\\" ~ escape_sequence |
  line_continuation |
  !"'" ~ char_literal
}

hjson_multiline_string = @{ "'''" ~ (!"'''" ~ ANY)* ~ "'''" }

hjson_punctuator = { "{" | "}" | "[" | "]" | "," | ":" }
hjson_number = { number ~ (hjson_punctuator | WHITESPACE | COMMENT) }
hjson_key = @{ (!hjson_punctuator ~ !COMMENT ~ ANY)+ }
hjson_unquoted = @{ !hjson_number ~ !hjson_punctuator ~ !COMMENT ~ (!line_terminator ~ ANY)+ }
hjson_unquoted_string = @{ hjson_unquoted ~ line_terminator_sequence ~ WHITESPACE* }

string = @{
    hjson_multiline_string |
    "'" ~ single_quote_char* ~ "'" |
    "\"" ~ double_quote_char* ~ "\"" |
    hjson_unquoted_string
}

text = { SOI ~ value? ~ EOI }

unicode_escape_sequence = @{ ASCII_HEX_DIGIT{4} }

unicode_letter = _{
  UPPERCASE_LETTER |
  LOWERCASE_LETTER |
  TITLECASE_LETTER |
  MODIFIER_LETTER |
  OTHER_LETTER |
  LETTER_NUMBER
}

value = _{ null | boolean | string | number | object | array }
